deepdive {

  db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user: czhang
    password: bB19871121
  }

  calibration.holdout_fraction: 0.0

  sampler.sampler_cmd: "sh /afs/cs.stanford.edu/u/czhang/run.sh"

  schema.variables {
  	relation_mentions.is_correct: Boolean
  }

  extraction.extractors {

  #}
  #comments {

    ext_cleanup{
      sql : """
        DELETE FROM relation_mentions;
        DELETE FROM relation_mention_features;
        DELETE FROM mentions;

      """
      style: "sql_extractor"
    }

    ext_relation_mention_feature {
      input : """
        SELECT doc_id, sentence_id, words, pos, ner, lemma, character_offset_begin, character_offset_end, dep_graph
        FROM sentence;
      """
      output_relation: "relation_mention_features"
      udf: "/afs/cs.stanford.edu/u/czhang/kbp/udf/ext_relation_mention_feature.py"
      style: "plpy_extractor"
      dependencies : ["ext_cleanup"]
    }


    ext_mention {
      input : """
        SELECT doc_id, sentence_id, words, pos, ner, lemma, character_offset_begin, character_offset_end 
        FROM sentence;
      """
      output_relation: "mentions"
      udf: "/afs/cs.stanford.edu/u/czhang/kbp/udf/ext_mention.py"
      style: "plpy_extractor"
      dependencies : ["ext_cleanup"]
    }


    ext_coref_candidate{
      sql: """
        DROP TABLE IF EXISTS coref_candidates;
        CREATE TABLE coref_candidates AS
        SELECT DISTINCT ON (t0.word, t1.word, t0.mention_id) 
             t0.doc_id, t0.mention_id AS mid1, t1.mention_id AS mid2 
        FROM mentions t0, mentions t1 
        WHERE t0.doc_id=t1.doc_id AND 
              t0.type='PERSON' AND 
              t1.type = 'PERSON' AND 
              t1.word LIKE t0.word || ' %' AND 
              t0.mention_id <> t1.mention_id 
        DISTRIBUTED BY (doc_id);
      """

      style: "sql_extractor"
      dependencies : ["ext_mention"]
    }



    ext_el_feature_extstr_person {
      sql: """
        DROP TABLE IF EXISTS el_features_highprec;
        CREATE TABLE el_features_highprec AS
      SELECT t0.doc_id, t0.mention_id, t1.fid, 'es'::TEXT AS feature 
      FROM   mentions t0, entities t1 
      WHERE  t0.type = 'PERSON' AND
             t1.type = 'people.person' AND 
             t0.word like '% %' AND t0.word = t1.text 
      DISTRIBUTED BY (doc_id);
    """
      style: "sql_extractor"
      dependencies : ["ext_mention"]
    }

    ext_el_feature_alias_person {
      sql: """
        INSERT INTO el_features_highprec 
      SELECT t0.doc_id, t0.mention_id, t1.fid, 'al'::TEXT AS feature 
      FROM   mentions t0, entities t1, fbalias t2
      WHERE  t0.type = 'PERSON' AND
             t1.type = 'people.person' AND 
             t0.word = t2.slot AND t1.fid=t2.fid AND t0.word like '% %';
    """
      dependencies : ["ext_el_feature_extstr_person"]
      style: "sql_extractor"
    }

    ext_el_feature_alias_organization {
      sql: """
        INSERT INTO el_features_highprec 
      SELECT t0.doc_id, t0.mention_id, t1.fid, 'al'::TEXT AS feature 
      FROM   mentions t0, entities t1, fbalias t2
      WHERE  t0.type = 'ORGANIZATION' AND
             t1.type = 'organization.organization' AND 
             t0.word = t2.slot AND t1.fid=t2.fid;
    """
      dependencies : ["ext_el_feature_extstr_person"]
      style: "sql_extractor"
    }

    ext_el_feature_alias_location {
      sql: """
        INSERT INTO el_features_highprec 
      SELECT t0.doc_id, t0.mention_id, t1.fid, 'al'::TEXT AS feature 
      FROM   mentions t0, entities t1, fbalias t2
      WHERE  t0.type = 'LOCATION' AND
             t1.type = 'location.location' AND 
             t0.word = t2.slot AND t1.fid=t2.fid;
    """
      dependencies : ["ext_el_feature_extstr_person"]
      style: "sql_extractor"
    }

    ext_el_feature_alias_title {
      sql: """
        INSERT INTO el_features_highprec 
      SELECT t0.doc_id, t0.mention_id, t1.fid, 'al'::TEXT AS feature 
      FROM   mentions t0, entities t1, fbalias t2
      WHERE  t0.type = 'TITLE' AND
             t1.type = 'business.job_title' AND 
             t0.word = t2.slot AND t1.fid=t2.fid;
    """
      dependencies : ["ext_el_feature_extstr_person"]
      style: "sql_extractor"
    }

    ext_el_feature_extstr_location {
      sql: """
        INSERT INTO el_features_highprec 
      SELECT t0.doc_id, t0.mention_id, t1.fid, 'es'::TEXT AS feature 
      FROM   mentions t0, entities t1 
      WHERE  t0.type = 'LOCATION' AND
             t1.type = 'location.location' AND 
             t0.word = t1.text ;
      """
      dependencies : ["ext_el_feature_extstr_person"]
      style: "sql_extractor"
    }

    ext_el_feature_extstr_organization {
      sql: """
        INSERT INTO el_features_highprec 
      SELECT t0.doc_id, t0.mention_id, t1.fid, 'es'::TEXT AS feature 
      FROM   mentions t0, entities t1 
      WHERE  t0.type = 'ORGANIZATION' AND
             t1.type = 'organization.organization' AND 
             t0.word = t1.text ;
    """
      dependencies : ["ext_el_feature_extstr_person"]
      style: "sql_extractor"
    }

    ext_el_feature_extstr_title {
      sql: """
        INSERT INTO el_features_highprec 
      SELECT t0.doc_id, t0.mention_id, t1.fid, 'es'::TEXT AS feature 
      FROM   mentions t0, entities t1 
      WHERE  t0.type = 'TITLE' AND
             t1.type = 'business.job_title' AND 
             t0.word = t1.text ;
    """
      dependencies : ["ext_el_feature_extstr_person"]
      style: "sql_extractor"
    }

    ext_el_feature_extstr_title2 {
      sql: """
        INSERT INTO el_features_highprec 
      SELECT t0.doc_id, t0.mention_id, t1.fid, 'es'::TEXT AS feature 
      FROM   mentions t0, entities t1 
      WHERE  t0.type = 'TITLE' AND
             t1.type = 'government.government_office_or_title' AND 
             t0.word = t1.text ;
    """
      dependencies : ["ext_el_feature_extstr_person"]
      style: "sql_extractor"
    }

    ext_el_feature_coref {
      sql: """
        INSERT INTO el_features_highprec
      select t0.doc_id, t0.mid1, t1.fid, 'co'::TEXT
      FROM   coref_candidates t0, el_features_highprec t1 
      WHERE  t1.feature= 'es' AND t0.mid2 = t1.mention_id AND t0.doc_id=t1.doc_id;
    """
    dependencies : ["ext_coref_candidate", "ext_el_feature_extstr_person"]
      style: "sql_extractor"
    }

    ext_relation_mention_positive {
      sql: """
        insert into relation_mentions (doc_id, mid1, mid2, word1, word2, rel, is_correct)
        select DISTINCT t0.doc_id, t0.mid1, t0.mid2, t0.word1, t0.word2, t3.rel, True 
        from relation_mention_features t0, el_features_highprec t1, el_features_highprec t2, kb t3 
        WHERE t0.mid1=t1.mention_id AND 
              t0.mid2=t2.mention_id AND 
              t1.fid=t3.eid1 AND 
              t2.fid=t3.eid2 AND 
              t0.doc_id=t1.doc_id AND 
              t0.doc_id=t2.doc_id;
      """
      dependencies : ["ext_el_feature_coref", "ext_el_feature_extstr_title", 
                      "ext_el_feature_extstr_organization", "ext_el_feature_extstr_location",
                      "ext_el_feature_extstr_person", "ext_coref_candidate", "ext_coref_candidate",
                      "ext_relation_mention_feature", "ext_mention", "ext_el_feature_alias_person",
                      "ext_el_feature_alias_title", "ext_el_feature_alias_location",
                      "ext_el_feature_alias_organization"]
      style: "sql_extractor"
    }


    ext_relation_mention_negative {
      sql: """
        insert into relation_mentions (doc_id, mid1, mid2, word1, word2, rel, is_correct)
        select DISTINCT t0.doc_id, t0.mid1, t0.mid2, t0.word1, t0.word2, t1.type2, False 
        from relation_mentions t0, incompatible_relations t1 WHERE t0.rel=t1.type1 and 
        t0.is_correct=True and t0.rel <> t1.type2 ;
      """
      dependencies : ["ext_relation_mention_positive"]
      style: "sql_extractor"
    }

    ext_relation_mention {
      sql: """
        insert into relation_mentions (doc_id, mid1, mid2, word1, word2, rel, is_correct)
        select distinct t1.doc_id, t1.mid1, t1.mid2, t1.word1, t1.word2, t0.rel, NULL::boolean 
        from relation_types t0, relation_mention_features t1 
        WHERE t0.type1=t1.type1 AND t0.type2=t1.type2 ;
      """
      dependencies : ["ext_relation_mention_positive", "ext_relation_mention_negative"]
      style: "sql_extractor"
    }

  }

  inference.factors: {

    relation_mention_lr {
      input_query: """
        select t0.doc_id as "distribute.key", t0.id as "relation_mentions.id", 
               t0.is_correct as "relation_mentions.is_correct", 
               t0.rel || '_' || unnest(t1.features) as "feature" 
        from relation_mentions t0, relation_mention_features t1 
        WHERE t0.doc_id=t1.doc_id AND t0.mid1=t1.mid1 AND t0.mid2=t1.mid2;
      """
      function: "IsTrue(relation_mentions.is_correct)"
      weight: "?(feature)"
    }


  }


  comments {

    ext_relation_mention {
      input : """
        SELECT doc_id, sentence_id, words, pos, ner, lemma, character_offset_begin, character_offset_end 
        FROM sentence;
      """
      output_relation: "relation_mentions"
      udf: "/afs/cs.stanford.edu/u/czhang/kbp/udf/ext_relation_mention.py"
      style: "plpy_extractor"
      dependencies : ["ext_cleanup"]
    }


  }


}