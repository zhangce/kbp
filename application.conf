deepdive {

  db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user: czhang
    password: bB19871121
  }

  calibration.holdout_fraction: 0.0

  sampler.sampler_cmd: "sh /afs/cs.stanford.edu/u/czhang/run.sh"

  schema.variables {
  	relation_mentions.is_correct: Boolean
  }


  pipeline.run: "test"
  pipeline.pipelines.test: ["ext_cleanup", "ext_mention", "ext_relation_mention_feature"]


  extraction.extractors {

    ext_cleanup {
      sql: """
        DELETE FROM relation_mentions;
        DELETE FROM relation_mention_features;
        DELETE FROM mentions;
      """
      style: "sql_extractor"
    }


    ext_mention {
      input : """
        SELECT doc_id,
               sentence_id,
               words,
               pos,
               ner,
               lemma,
               character_offset_begin,
               character_offset_end
        FROM sentence;
      """
      output_relation: "mentions"
      udf: ${APP_HOME}"/udf/ext_mention.py"
      style: "plpy_extractor"
      dependencies : ["ext_cleanup"]
    }


    # ext_relation_mention_feature {
    #   input: """
    #     SELECT doc_id,
    #            sentence_id,
    #            words,
    #            pos,
    #            ner,
    #            lemma,
    #            character_offset_begin,
    #            character_offset_end,
    #            dep_graph
    #     FROM sentence ORDER BY doc_id
    #   """
    #   output_relation: "relation_mention_features"
    #   #udf: "/afs/cs.stanford.edu/u/czhang/kbp/udf/ext_relation_mention_feature.py"
    #   udf: ${APP_HOME}"/udf/dummy_json.py"
    #   #style: "plpy_extractor"
    #   dependencies : ["ext_cleanup", "ext_mention"]
    # }

    ext_relation_mention_feature {
      input: """
        SELECT s.doc_id AS doc_id,
               s.sentence_id AS sentence_id,
               max(s.lemma) AS lemma,
               max(s.dep_graph) AS dep_graph,
               max(s.words) AS words,
               max(s.pos) AS pos,
               max(s.ner) AS ner,
               max(s.character_offset_begin) AS character_offset_begin,
               max(s.character_offset_end) AS character_offset_end,
               array_accum(m.mention_id) AS mention_ids,
               array_accum(m.word) AS mention_words,
               array_accum(m.type) AS types,
               array_accum(m.start) AS starts,
               array_accum(m.end) AS ends
        FROM sentence s,
             mentions m
        WHERE s.doc_id = m.doc_id AND
              s.sentence_id = m.sentence_id
        GROUP BY s.doc_id,
                 s.sentence_id
      """
      output_relation: "relation_mention_features"
      udf: ${APP_HOME}"/udf/ext_relation_mention_feature_mike.py"
      style: "plpy_extractor"
      dependencies: ["ext_cleanup", "ext_mention"]
    }


    ext_coref_candidate {
      sql: """
        DROP TABLE IF EXISTS coref_candidates;

        CREATE TABLE coref_candidates AS
          SELECT DISTINCT ON (m0.word, m1.word, m0.mention_id)
               m0.doc_id,
               m0.mention_id AS mid1,
               m1.mention_id AS mid2
          FROM mentions m0,
               mentions m1
          WHERE m0.doc_id = m1.doc_id AND
                m0.type = 'PERSON' AND
                m1.type = 'PERSON' AND
                m1.word LIKE m0.word || ' %' AND
                m0.mention_id <> m1.mention_id
        DISTRIBUTED BY (doc_id);
      """
      style: "sql_extractor"
      dependencies : ["ext_mention"]
    }


    ext_el_feature_extstr_person {
      sql: """
        DROP TABLE IF EXISTS el_features_highprec;
        CREATE TABLE el_features_highprec AS
          SELECT m.doc_id,
                 m.mention_id,
                 e.fid,
                 'es'::TEXT AS feature
          FROM   mentions m,
                 entities e
          WHERE  m.type = 'PERSON' AND
                 e.type = 'people.person' AND
                 m.word like '% %' AND
                 m.word = e.text
      DISTRIBUTED BY (doc_id);
    """
      style: "sql_extractor"
      dependencies : ["ext_mention"]
    }

    ext_el_feature_alias_person {
      sql: """
        INSERT INTO el_features_highprec
          SELECT m.doc_id,
                 m.mention_id,
                 e.fid,
                 'al'::TEXT AS feature
          FROM   mentions m,
                 entities e,
                 fbalias f
          WHERE  m.type = 'PERSON' AND
                 e.type = 'people.person' AND
                 m.word = f.slot AND
                 e.fid = f.fid AND
                 m.word like '% %';
      """
      dependencies : ["ext_el_feature_extstr_person"]
      style: "sql_extractor"
    }

    ext_el_feature_alias_organization {
      sql: """
        INSERT INTO el_features_highprec
          SELECT m.doc_id,
                 m.mention_id,
                 e.fid,
                 'al'::TEXT AS feature
          FROM   mentions m,
                 entities e,
                 fbalias f
          WHERE  m.type = 'ORGANIZATION' AND
                 e.type = 'organization.organization' AND
                 m.word = f.slot AND
                 e.fid = f.fid;
      """
      dependencies : ["ext_el_feature_extstr_person"]
      style: "sql_extractor"
    }

    ext_el_feature_alias_location {
      sql: """
        INSERT INTO el_features_highprec
          SELECT m.doc_id,
                 m.mention_id,
                 e.fid,
                 'al'::TEXT AS feature
          FROM   mentions m,
                 entities e,
                 fbalias f
          WHERE  m.type = 'LOCATION' AND
                 e.type = 'location.location' AND
                 m.word = f.slot AND
                 e.fid = f.fid;
      """
      dependencies : ["ext_el_feature_extstr_person"]
      style: "sql_extractor"
    }

    ext_el_feature_alias_title {
      sql: """
        INSERT INTO el_features_highprec
          SELECT m.doc_id,
                 m.mention_id,
                 e.fid,
                 'al'::TEXT AS feature
          FROM   mentions m,
                 entities e,
                 fbalias f
          WHERE  m.type = 'TITLE' AND
                 e.type = 'business.job_title' AND
                 m.word = f.slot AND
                 e.fid = f.fid;
      """
      dependencies : ["ext_el_feature_extstr_person"]
      style: "sql_extractor"
    }

    ext_el_feature_extstr_location {
      sql: """
        INSERT INTO el_features_highprec
          SELECT m.doc_id,
                 m.mention_id,
                 e.fid,
                 'es'::TEXT AS feature
          FROM   mentions m,
                 entities e
          WHERE  m.type = 'LOCATION' AND
                 e.type = 'location.location' AND
                 m.word = e.text;
      """
      dependencies : ["ext_el_feature_extstr_person"]
      style: "sql_extractor"
    }

    ext_el_feature_extstr_organization {
      sql: """
          INSERT INTO el_features_highprec
            SELECT m.doc_id,
                   m.mention_id,
                   e.fid,
                   'es'::TEXT AS feature
            FROM   mentions m,
                   entities e
            WHERE  m.type = 'ORGANIZATION' AND
                   e.type = 'organization.organization' AND
                   m.word = e.text;
      """
      dependencies : ["ext_el_feature_extstr_person"]
      style: "sql_extractor"
    }

    ext_el_feature_extstr_title {
      sql: """
        INSERT INTO el_features_highprec
          SELECT t0.doc_id,
                 t0.mention_id,
                 t1.fid,
                 'es'::TEXT AS feature
          FROM   mentions t0,
                 entities t1
          WHERE  t0.type = 'TITLE' AND
                 t1.type = 'business.job_title' AND
                 t0.word = t1.text;
      """
      dependencies : ["ext_el_feature_extstr_person"]
      style: "sql_extractor"
    }

    ext_el_feature_extstr_title2 {
      sql: """
        INSERT INTO el_features_highprec
          SELECT m.doc_id,
                 m.mention_id,
                 e.fid,
                 'es'::TEXT AS feature
          FROM   mentions m,
                 entities e
          WHERE  m.type = 'TITLE' AND
                 e.type = 'government.government_office_or_title' AND
                 m.word = e.text;
      """
      dependencies : ["ext_el_feature_extstr_person"]
      style: "sql_extractor"
    }

    ext_el_feature_coref {
      sql: """
        INSERT INTO el_features_highprec
          SELECT c.doc_id,
                 c.mid1,
                 el.fid,
                 'co'::TEXT
          FROM   coref_candidates c,
                 el_features_highprec el
          WHERE  el.feature= 'es' AND
                 c.mid2 = el.mention_id AND
                 c.doc_id = el.doc_id;
      """
      dependencies : ["ext_coref_candidate", "ext_el_feature_extstr_person"]
      style: "sql_extractor"
    }

    ext_relation_mention_positive {
      sql: """
        INSERT INTO relation_mentions (doc_id, mid1, mid2, word1, word2, rel, is_correct)
          SELECT DISTINCT r.doc_id,
                          r.mid1,
                          r.mid2,
                          r.word1,
                          r.word2,
                          kb.rel,
                          True
          FROM relation_mention_features r,
               el_features_highprec t1,
               el_features_highprec t2,
               kb
          WHERE r.mid1 = t1.mention_id AND
                r.mid2 = t2.mention_id AND
                t1.fid = kb.eid1 AND
                t2.fid = kb.eid2 AND
                r.doc_id = t1.doc_id AND
                r.doc_id = t2.doc_id;
        """
      dependencies : ["ext_el_feature_coref", "ext_el_feature_extstr_title", 
                      "ext_el_feature_extstr_organization", "ext_el_feature_extstr_location",
                      "ext_el_feature_extstr_person", "ext_coref_candidate", "ext_coref_candidate",
                      "ext_relation_mention_feature", "ext_mention", "ext_el_feature_alias_person",
                      "ext_el_feature_alias_title", "ext_el_feature_alias_location",
                      "ext_el_feature_alias_organization"]
      style: "sql_extractor"
    }


    ext_relation_mention_negative {
      sql: """
        INSERT INTO relation_mentions (doc_id, mid1, mid2, word1, word2, rel, is_correct)
          SELECT DISTINCT t0.doc_id,
                          t0.mid1,
                          t0.mid2,
                          t0.word1,
                          t0.word2,
                          t1.type2,
                          False
          FROM relation_mentions t0,
               incompatible_relations t1
          WHERE t0.rel = t1.type1 AND
                t0.is_correct = True AND
                t0.rel <> t1.type2;
      """
      dependencies : ["ext_relation_mention_positive"]
      style: "sql_extractor"
    }


    # ext_relation_mention_negative_functional_location {
    #   sql: """
    #     INSERTT INTO relation_mentions (doc_id, mid1, mid2, word1, word2, rel, is_correct)
    #       SELECT DISTINCT r.doc_id,
    #                       r.mid1,
    #                       m2.mention_id,
    #                       r.word1,
    #                       m2.word,
    #                       kb.rel,
    #                       False
    #       FROM relation_mention_features r,
    #            el_features_highprec el1,
    #            el_features_highprec el2,
    #            relation_types types,
    #            mentions m1,
    #            mentions m2,
    #            freebase f1,
    #            freebase f2,
    #            kb
    #       WHERE kb.eid1 = el1.fid AND
    #             kb.eid2 <> el2.fid AND
    #             kb.eid1 <> el2.fid AND
    #             r.mid1 = el1.mention_id AND
    #             r.mid2 = el2.mention_id AND
    #             m1.mention_id = r.mid1 AND
    #             m1.sentence_id = m2.sentence_id AND
    #             m2.mention_id = el2.mention_id AND
    #             r.doc_id = el1.doc_id AND
    #             r.doc_id = el2.doc_id AND
    #             m2.doc_id = r.doc_id AND
    #             m1.doc_id = r.doc_id AND
    #             types.is_functional = True AND
    #             kb.rel = types.rel AND
    #             kb.rel LIKE '%LOCATION%' AND
    #             r.type1 = types.type1 AND
    #             r.type2 = types.type2 AND
    #             f1.type = 'type.type.instance' AND
    #             f1.slot = el1.fid AND
    #             f2.type = 'type.type.instance' AND
    #             f2.slot = el2.fid;
    #   """
    #   dependencies : ["ext_relation_mention_negative"]
    #   style: "sql_extractor"
    # }


    ext_relation_mention {
      sql: """
        INSERT INTO relation_mentions (doc_id, mid1, mid2, word1, word2, rel, is_correct)
          SELECT DISTINCT t1.doc_id,
                          t1.mid1,
                          t1.mid2,
                          t1.word1,
                          t1.word2,
                          t0.rel,
                          NULL::boolean
          FROM relation_types t0,
               relation_mention_features t1
          WHERE t0.type1 = t1.type1 AND
                t0.type2 = t1.type2;
      """
      dependencies : ["ext_relation_mention_positive", "ext_relation_mention_negative"]
      style: "sql_extractor"
    }

  }

  inference.factors: {

    relation_mention_lr {
      input_query: """
        SELECT t0.doc_id AS "distribute.key",
               t0.id AS "relation_mentions.id",
               t0.is_correct AS "relation_mentions.is_correct",
               t0.rel || '_' || unnest(t1.features) AS "feature"
        FROM relation_mentions t0,
             relation_mention_features t1
        WHERE t0.doc_id = t1.doc_id AND
              t0.mid1 = t1.mid1 AND
              t0.mid2 = t1.mid2;
      """
      function: "IsTrue(relation_mentions.is_correct)"
      weight: "?(feature)"
    }

  }


}
