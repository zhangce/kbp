strict = true  // ensure that all options are used (safety measure)

work.dir   = "/tmp/"
kbp.year   = ${KBPYEAR}
index.official = "/scr/nlp/data/tackbp2014/indices/tac-kbp-2010-source-annotated"  // changes with kbp.year
kbp.runid  = "stanford1"
  
entitylinking {
  linker = "edu.stanford.nlp.kbp.entitylinking.WikidictEntityLinker"
  malenames = "/scr/nlp/data/tackbp2014/data/gazetteers/kbp_male_names.txt"
  femalenames = "/scr/nlp/data/tackbp2014/data/gazetteers/kbp_female_names.txt"
}

process {
  domreader {  // Only used in script to create clean knowledge base
    countries     = "/scr/nlp/data/tackbp2014/data/clean_knowledge_base/manual_lists/locations/countries"
    manual.lists  = "/scr/nlp/data/tackbp2014/data/clean_knowledge_base/manual_lists/specific_relations"
    states        = "/scr/nlp/data/tackbp2014/data/clean_knowledge_base/manual_lists/locations/statesandprovinces"
    ner           = "/u/nlp/data/TAC-KBP2010/sentence_extraction/NER_types"
  }
  regexner {
    dir = "/scr/nlp/data/tackbp2014/data/gazetteers/"
    caseless = "kbp_regexner_mapping_nocase.tab"
    withcase = "kbp_regexner_mapping.tab"
  }
  relation {
    normalizecorefslot = false
  }
  wordclusters.file = /juice/u35/u/nlp/data/pos_tags_are_useless/egw4-reut.512.clusters  // at: /u/nlp/data/pos_tags_are_useless/egw4-reut.512.clusters
}

train {
  model = "JOINT_BAYES"
  fixkb = true
  features = """
    arg_words, arg_cluster, arg_type, arg_order
    full_tree_path
    surface_distance_binary, surface_distance_bins
    adjacent_words, adjacent_clusters
    entities_between_args
    entity_counts_binary, entity_counts_bins
    span_words_unigrams, span_clusters_unigrams
    dependency_path_lowlevel, dependency_path_words, dependency_path_clusters
    """
  tuples {
    files       = """[
        /scr/nlp/data/tackbp2014/data/clean_knowledge_base/knowledgebase.v1.tsv"
      ]"""
    count       = 100000000
    featurecountthreshold = 5
  }
  negatives {
    ratio = 0.5
    incomplete     = true
    incompatible   = true
  }
  jointbayes {
    epochs          = 7
    zminimizer      = qn  // QN gives better results, but is slower; SGD is faster
    inferencetype   = "stable"
    filter          = "edu.stanford.nlp.kbp.slotfilling.classify.JointBayesRelationExtractor$AllFilter"
    outdistribution = "y_then_noisy_or"
    folds           = 3
    loadinitmodel   = false
    yfeatures       = "{ atleast_once, cooc }" // atleast_once, cooc, unique, atleast_n
    turkertrust     = 1.0
    initialization  = supervised
  }
  ensemble {
    method = BAGGING
    component = JOINT_BAYES
    numcomponents = 7
  }
  perceptron.epochs     = 20
  tokensregex.dir = /scr/nlp/data/tackbp2014/data/tokenregex
  annotatedsentences.do = true
  annotatedsentences.keys = "/scr/nlp/data/tackbp2014/data/annotated_sentences/v2_iter0_sampleKL.keys"
  annotatedsentences.data = """[
    /scr/nlp/data/tackbp2014/data/annotated_sentences/v1_iter0_sampleKL.csv
    /scr/nlp/data/tackbp2014/data/annotated_sentences/v2_iter0_highKL.csv
    /scr/nlp/data/tackbp2014/data/annotated_sentences/v2_iter0_sampleKL.csv
    /scr/nlp/data/tackbp2014/data/annotated_sentences/v2_iter0_uniform.csv
    ]"""
}

test {
  scoremode = "official" //options: "official", "irRecall"
  anydoc = true
  probabilitypriors = false
  queryscorefile            = "query_score"
  list.output  = "all" // | "best"
  consistency {
    do = true
    worldknowledgedir = "/scr/nlp/data/tackbp2014/data/gazetteers"
    gibbsobjective = TOP
    rewrite = true
  }
  rules {
    do = true
    alternatenames {
      do = true
      coref = false
      fraction = 0.00
    }
  }
  threshold {
    tune = none // none, fixed, global, per_relation
    min.global = 0.5
    min.perrelation = "{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }"
  }
  ensemble.combination = AGREE_MOST
  graph {
    depth = 4
    maxsize = 150
    merge {                // merge equivalent entities
      do = false
      strategy = noisy_or
    }
    transitive.do  = false  // compute completion transitive relations (should be on if merging is on)
    symmeterize.do = false  // enforce symmetric relations
    openie.do    = false
    openie.class = edu.stanford.nlp.kbp.slotfilling.classify.OpenIERelationExtractor
    altnames.do  = true
    inference {
      do           = false
      class        = "edu.stanford.nlp.kbp.slotfilling.evaluate.inference.SimpleGraphInferenceEngine"
      rules.cutoff = 0.0
    }
  }
  
  slotfilling { 
    mode = "simple"  // simple | inferential
  }

  queries = """{
      KBP2009 -> "evaluation_queries/2009.xml"
      KBP2010 -> "evaluation_queries/2010.xml"
      KBP2011 -> "evaluation_queries/2011.xml"
      KBP2012 -> "evaluation_queries/2012.xml"
      KBP2013 -> "evaluation_queries/2013.xml"
    }"""
  responses = """{
      KBP2009 -> "evaluation_results/2009.tab"
      KBP2010 -> "evaluation_results/2010.tab.lower"
      KBP2011 -> "evaluation_results/2011.dir"
      KBP2012 -> "evaluation_results/2012.dir"
      KBP2013 -> "evaluation_results/2013.dir"
    }"""
  relationfilter {
    do = true
    components = "edu.stanford.nlp.kbp.slotfilling.process.RelationFilter$PerRelTypeCompetitionFilterComponent"
  }
}

cache {
  lock = false
  sentences {
    do = true
  }
  datums {
    do = true
  }
  provenance {
    do = true
  }
  sentencegloss {
    do = true
  }
  graph {
    do = true
  }
}

//
// IR
//
index {
  defaultversion = "KBP_INDEX_2013"
  mode = HEURISTIC_BACKOFF

  paths    = """
             /scr/nlp/data/tackbp2014/indices/tac-kbp-2013-source-annotated
             /scr/nlp/data/tackbp2014/indices/tac-kbp-2010-source-annotated
             /scr/nlp/data/tackbp2014/indices/wikipedia-2013
             """
  
  relationtriggers = "/scr/nlp/data/tackbp2014/data/keywords_no_ml"
  wikidict = "/scr/nlp/data/tackbp2014/indices/wikidict-entity-linking"

  websnippets {
    do = true
    dir = /scr/nlp/data/tac-kbp/common-data/annotated_protos/websnippets/
  }
  postirannotator {
    do = true
    approxname  = false
    commonnames = "/scr/nlp/data/tackbp2014/data/common_names.txt"
  }
  coref.do = true
  train {
    sentences.per.entity    = 50
  }
  test {
    sentences.per.entity    = 50
  }
  readdoc {
//    rewrite = """{ ser.gz -> proto.gz, annotated_docs -> annotated_protos }"""
  }
}

//
// Redwood Logger
//
log {
  captureStreams = true
  collapse       = "none"
  neatExit       = true
  channels.debug = false
  channels.width = 20
  file           = "/dev/null"
}


//
// DEEP DIVE
//
kbp {
  model.dir = "/tmp/"
  train     = false
  evaluate  = true
}
test.slotfilling.mode = deep_dive

deepdive {
  host      = ${PGHOST}
  port      = ${PGPORT}
  user      = ${PGUSER}
  db        = ${DBNAME}
}
